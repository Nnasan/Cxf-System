<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.aike.mapper.ErrorcordMapper" >
  <resultMap id="BaseResultMap" type="com.aike.pojo.Record" >
<!--    <id column="er_id" property="erId" jdbcType="INTEGER" />
    <result column="er_re_id" property="erReId" jdbcType="INTEGER" />
    <result column="er_reason" property="erReason" jdbcType="VARCHAR" />-->
    <id column="r_id" property="rId" jdbcType="INTEGER" />
    <result column="s_id" property="sId" jdbcType="INTEGER" />
    <result column="d_id" property="dId" jdbcType="INTEGER" />
    <result column="date" property="date" jdbcType="TIMESTAMP" />
    <result column="updatescore" property="updatescore" jdbcType="DOUBLE" />
    <result column="status" property="status" jdbcType="BIT" />
    <result column="c_id" property="cId" jdbcType="INTEGER" />
    <result column="remarks" property="remarks" jdbcType="VARCHAR" />
    <result column="s_name" property="sName" jdbcType="VARCHAR" />
    <result column="d_name" property="dName" jdbcType="VARCHAR" />
    <result column="c_name" property="cName" jdbcType="VARCHAR" />
    <result column="s_sno" property="sSno" jdbcType="VARCHAR" />
    <result column="d_sno" property="dSno" jdbcType="VARCHAR" />
    <result column="c_sno" property="cSno" jdbcType="VARCHAR" />
    <result column="cl_name" property="clName" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    er_id, er_re_id, er_reason
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.aike.pojo.ErrorcordExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from errorcord
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from errorcord
    where er_id = #{erId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from errorcord
    where er_id = #{erId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.aike.pojo.ErrorcordExample" >
    delete from errorcord
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.aike.pojo.Errorcord" >
    insert into errorcord (er_id, er_re_id, er_reason
      )
    values (#{erId,jdbcType=INTEGER}, #{erReId,jdbcType=INTEGER}, #{erReason,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.aike.pojo.Errorcord" >
    insert into errorcord
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="erId != null" >
        er_id,
      </if>
      <if test="erReId != null" >
        er_re_id,
      </if>
      <if test="erReason != null" >
        er_reason,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="erId != null" >
        #{erId,jdbcType=INTEGER},
      </if>
      <if test="erReId != null" >
        #{erReId,jdbcType=INTEGER},
      </if>
      <if test="erReason != null" >
        #{erReason,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.aike.pojo.ErrorcordExample" resultType="java.lang.Integer" >
    select count(*) from errorcord
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update errorcord
    <set >
      <if test="record.erId != null" >
        er_id = #{record.erId,jdbcType=INTEGER},
      </if>
      <if test="record.erReId != null" >
        er_re_id = #{record.erReId,jdbcType=INTEGER},
      </if>
      <if test="record.erReason != null" >
        er_reason = #{record.erReason,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update errorcord
    set er_id = #{record.erId,jdbcType=INTEGER},
      er_re_id = #{record.erReId,jdbcType=INTEGER},
      er_reason = #{record.erReason,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.aike.pojo.Errorcord" >
    update errorcord
    <set >
      <if test="erReId != null" >
        er_re_id = #{erReId,jdbcType=INTEGER},
      </if>
      <if test="erReason != null" >
        er_reason = #{erReason,jdbcType=VARCHAR},
      </if>
    </set>
    where er_id = #{erId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.aike.pojo.Errorcord" >
    update errorcord
    set er_re_id = #{erReId,jdbcType=INTEGER},
      er_reason = #{erReason,jdbcType=VARCHAR}
    where er_id = #{erId,jdbcType=INTEGER}
  </update>
  <select id="selectNotReject" resultMap="BaseResultMap">
    select
    re.r_id, re.s_id, re.d_id, re.date, re.updatescore, re.status, re.c_id, re.remarks
    ,ch.c_name,da.d_name,st.s_name,ch.c_sno,da.d_sno,st.s_sno,cl.cl_name
    from
    errorcord er
    left join record re
    on er.er_re_id = re.r_id
    left join student st on
    st.s_id = re.s_id
    left join dataer da on
    da.d_id = re.d_id
    left join checker ch on
    ch.c_id = re.c_id
    left join class cl on
    cl.cl_id = st.s_class_id
    where re.status = 1
    or re.c_id is null
  </select>
</mapper>